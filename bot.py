import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –í–∞—à —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
TELEGRAM_TOKEN = 'tokentipopon:-'

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç—ã"))
keyboard.add(KeyboardButton("–ü–æ–∏—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"))
keyboard.add(KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã"))  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
@dp.message_handler(lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç—ã")
async def show_latest_scripts(message: types.Message):
    response = requests.get("https://rscripts.net/api/v2/scripts?page=1&orderBy=date&sort=desc")
    
    if response.status_code == 200:
        scripts_data = response.json().get('scripts', [])
        if not scripts_data:
            await message.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤.')
            return
        
        message_text = "–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç—ã:\n\n"
        for script in scripts_data:
            title = script.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            description = script.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            creator = script.get('user', {}).get('username', script.get('creator', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
            message_text += f"üìù {title}\n{description}\nüë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator}\n\n"
        
        await message.reply(message_text)
    else:
        await message.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤.')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
@dp.message_handler(lambda message: message.text == "–ü–æ–∏—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
async def search_script(message: types.Message):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–µ:')

@dp.message_handler()
async def handle_search(message: types.Message):
    query = message.text
    response = requests.get("https://rscripts.net/api/v2/scripts?page=1&orderBy=date&sort=desc")
    
    if response.status_code == 200:
        scripts_data = response.json().get('scripts', [])
        found_scripts = [script for script in scripts_data if query.lower() in script.get('title', '').lower()]
        
        if not found_scripts:
            await message.reply('–°–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            return
        
        message_text = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã:\n\n"
        for script in found_scripts:
            title = script.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            description = script.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            creator = script.get('user', {}).get('username', script.get('creator', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
            message_text += f"üìù {title}\n{description}\nüë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator}\n\n"
        
        await message.reply(message_text)
    else:
        await message.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤.')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
@dp.message_handler(lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã")
async def show_trending_scripts(message: types.Message):
    response = requests.get("https://rscripts.net/api/v2/trending")
    
    if response.status_code == 200:
        data = response.json()
        if data.get('success'):
            trending_scripts = data['success']
            if not trending_scripts:
                await message.reply('–ù–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤.')
                return
            
            message_text = "–í–æ—Ç —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã:\n\n"
            for script in trending_scripts:
                title = script.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                description = script.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                creator = script.get('user', {}).get('username', script.get('creator', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
                message_text += f"üìù {title}\n{description}\nüë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator}\n\n"
            
            await message.reply(message_text)
        else:
            await message.reply(f"–û—à–∏–±–∫–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    else:
        await message.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤.')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /script
@dp.message_handler(commands=['script'])
async def get_script(message: types.Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    command_parts = message.text.split()
    
    if len(command_parts) != 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /script <ID>")
        return
    
    script_id = command_parts[1]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    response = requests.get(f"https://rscripts.net/api/v2/script?id={script_id}")
    
    if response.status_code == 200:
        data = response.json()
        if data.get('success'):
            script = data['success']
            title = script.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            description = script.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            creator = script.get('user', {}).get('username', script.get('creator', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
            
            message_text = f"üìù {title}\n{description}\nüë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator}"
            await message.reply(message_text)
        else:
            await message.reply(f"–û—à–∏–±–∫–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    else:
        await message.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞.')

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
